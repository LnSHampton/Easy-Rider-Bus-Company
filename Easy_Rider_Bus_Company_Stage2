# -*- coding: utf-8 -*-
"""
Created on Wed Mar 16 06:09:43 2022

Project: Easy Rider Bus Company

Stage 2/6: Correct syntax

Description

You managed to fill in all the missing data and correct the mistakes with the 
types. However, you noticed that there are multiple problems with suffix names 
for the stops: sometimes they are incorrect, and sometimes they are simply 
missing. As if that was not enough, you also realized that there are errors in 
the arrival times.

It seems like you have to carefully look at the entire "Format" column in the 
first part of the documentation.

Here are the documents that you have: documentation and diagram of the bus 
lines.

Documentation: 

Objectives

1. The string containing the data in JSON format is passed to standard input.
2. Check that the data format complies with the documentation.
3. Only the fields that have such a requirement are relevant.
4. Like in the previous stage, print the information about the number of found 
   errors in total and in each field.
5. The output should have the same formatting as shown in the example.

If you can't find the necessary information in the stage description, it can 
probably be found in the attached documentation.

Note that the time format is military time (24 hours, hh:mm), which does not 
mean that all the digits are present. Keep in mind certain restrictions: for 
example, the first digit cannot be 3, 4, and so on

Example:
    
Input:

[
    {
        "bus_id": 128,
        "stop_id": 1,
        "stop_name": "Prospekt Av.",
        "next_stop": 3,
        "stop_type": "S",
        "a_time": "08:12"
    },
    {
        "bus_id": 128,
        "stop_id": 3,
        "stop_name": "Elm Street",
        "next_stop": 5,
        "stop_type": "",
        "a_time": "8:19"
    },
    {
        "bus_id": 128,
        "stop_id": 5,
        "stop_name": "Fifth Avenue",
        "next_stop": 7,
        "stop_type": "OO",
        "a_time": "08:25"
    },
    {
        "bus_id": 128,
        "stop_id": 7,
        "stop_name": "Sesame Street",
        "next_stop": 0,
        "stop_type": "F",
        "a_time": "08:77"
    },
    {
        "bus_id": 256,
        "stop_id": 2,
        "stop_name": "Pilotow Street",
        "next_stop": 3,
        "stop_type": "S",
        "a_time": "09:20"
    },
    {
        "bus_id": 256,
        "stop_id": 3,
        "stop_name": "Elm",
        "next_stop": 6,
        "stop_type": "",
        "a_time": "09:45"
    },
    {
        "bus_id": 256,
        "stop_id": 6,
        "stop_name": "Sunset Boulevard",
        "next_stop": 7,
        "stop_type": "A",
        "a_time": "09:59"
    },
    {
        "bus_id": 256,
        "stop_id": 7,
        "stop_name": "Sesame Street",
        "next_stop": 0,
        "stop_type": "F",
        "a_time": "10.12"
    },
    {
        "bus_id": 512,
        "stop_id": 4,
        "stop_name": "bourbon street",
        "next_stop": 6,
        "stop_type": "S",
        "a_time": "38:13"
    },
    {
        "bus_id": 512,
        "stop_id": 6,
        "stop_name": "Sunset Boulevard",
        "next_stop": 0,
        "stop_type": "F",
        "a_time": "08:16"
    }
]

Output:

Format validation: 9 errors
stop_name: 3
stop_type: 2
a_time: 4


"""
# Posted Solution
import json
import re


bus_lines = json.loads(input('> '))
db_format = {
    'stop_name': {'type': str, 'req': True,  
                  'format': '^[A-Z].*? (Road|Avenue|Street|Boulevard)$'},
    'stop_type': {'type': str, 'req': False, 'format': '^[SOF]$'},
    'a_time': {'type': str, 'req': True,  
               'format': '^([0-1][0-9]|[2][0-3]):[0-5][0-9]$'}
    }

db_errors = {key: 0 for key in db_format.keys()}
for stop in bus_lines:
    for key, value in db_format.items():
        if not (not stop[key] or re.search(value['format'], stop[key])):
            db_errors[key] += 1

print(f'Format validation: {sum([x for x in db_errors.values()])} errors')
print('\n'.join([f'{key}: {value}' for key, value in db_errors.items()])) 

#%%
db_format = {
    'bus_id': {'type': int, 'req': True, 'format': ''},
    'stop_id': {'type': int, 'req': True, 'format': ''},
    'stop_name': {'type': str, 'req': True,  
                  'format': '^[A-Z].*? (Road|Avenue|Street|Boulevard)$'},
    'next_stop': {'type': int, 'req': True, 'format': ''},
    'stop_type': {'type': str, 'req': False, 'format': '^[SOF]$'},
    'a_time': {'type': str, 'req': True,  
               'format': '^([0-1][0-9]|[2][0-3]):[0-5][0-9]$'}
    }

db_errors = {key: 0 for key in db_format.keys()}
for stop in bus_lines:
    for key in db_format:
        if not(isinstance(stop[key],db_format[key]['type'])):
            db_errors[key] += 1
            continue
        if db_format[key]['req'] and stop[key] is None:  # Missing required field
            db_errors[key] += 1
            continue
        if isinstance(stop[key], int):  # no requirements for integers
            continue
        if not (not stop[key] or re.search(db_format[key]['format'], stop[key])):
            db_errors[key] += 1

print(f'Format validation: {sum([x for x in db_errors.values()])} errors')
if sum([value for value in db_errors.values()]) != 0:
    print('\n'.join([f'{key}: {value}' for key, value in db_errors.items() if value > 0])) 
else:
    print('stop_name: 0\nstop_type: 0\na_time: 0')
#%%

import json
import re


bus_lines = json.loads(input('> '))

db_format = {
    'bus_id': {'type': int, 'req': True, 'format': ''},
    'stop_id': {'type': int, 'req': True, 'format': ''},
    'stop_name': {'type': str, 'req': True,  
                  'format': '^[A-Z].*? (Road|Avenue|Street|Boulevard)$'},
    'next_stop': {'type': int, 'req': True, 'format': ''},
    'stop_type': {'type': str, 'req': False, 'format': '^[SOF]$'},
    'a_time': {'type': str, 'req': True,  
               'format': '^([0-1][0-9]|[2][0-3]):[0-5][0-9]$'}
    }
#%%
db_errors = {key: 0 for key in db_format.keys()}
for stop in bus_lines:
    print(f'\nStop: {stop}\n')
    for key in db_format:
        print('Key:', key, ', Value:', stop[key], ', Key type:', type(stop[key]))
        if not(isinstance(stop[key],db_format[key]['type'])):
            print(f'Key: {key} wrong type: {type(stop[key])}')
            db_errors[key] += 1
            continue
        if db_format[key]['req'] and stop[key] is None:  # Missing required field
            print(f'Key: {key} missing required value')
            db_errors[key] += 1
            continue
        if isinstance(stop[key], int):  # no requirements for integers
            # print('Is Integer?:', isinstance(stop[key],int))
            continue
        # Check string field formats
        print('Check string formats')
        # print(f'Key: {key}, Value [{stop[key]}]')
        print('Required Format: {}'.format(db_format[key]['format']))
            # print('Key: {}, Value: {}, Format Check: {}'.format(key, stop[key], db_format[key]['format']))
            # if db_format[key]['req'] and re.search(db_format[key]['format'],stop[key]):
            # If there is no value or, if there is, the format is right
            # if not stop[key] or re.search(db_format[key]['format'], stop[key]):
            #     pass  # criteria met
            #     # print('Match')
            # else:  # There is a value in the wrong format
            #     print('Key: {}, Value: {}, Format Check: {}'.format(key, stop[key], db_format[key]['format']))
            #     print('No match')
            #     db_errors[key] += 1
            #     error_count += 1
        if not (not stop[key] or re.search(db_format[key]['format'], stop[key])):
                # print('Key: {}, Value: {}, Format Check: {}'.format(key, stop[key], db_format[key]['format']))
            # print('Format Check: {}'.format(db_format[key]['format']))
            print('No match\n')
            db_errors[key] += 1
        else:
            print('Looks OK.\n')

print(f'Format validation: {sum([x for x in db_errors.values()])} errors')
# print('\n'.join([f'{key}: {value}' for key, value in db_errors.items()]))
# print('\n'.join([f'{key}: {value}' for key, value in sorted(db_errors.items(), 
#       key=lambda x: (db_format[x[0]]['order'])) if value > 0]))
print('\n'.join([f'{key}: {value}' for key, value in db_errors.items() if value > 0])) 

#%%
"""
[{"bus_id" : 128, "stop_id" : 1, "stop_name" : "Fifth Avenue", "next_stop" : 4, "stop_type" : "S", "a_time" : "08:12"},
 {"bus_id" : 128, "stop_id" : 4, "stop_name" : "Abbey Road", "next_stop" : 5, "stop_type" : "", "a_time" : "08:19"},
 {"bus_id" : 128, "stop_id" : 5, "stop_name" : "Santa Monica Boulevard", "next_stop" : 8, "stop_type" : "O", "a_time" : "08:25"},
 {"bus_id" : 128, "stop_id" : 8, "stop_name" : "Elm Street", "next_stop" : 11, "stop_type" : "", "a_time" : "08:37"},
 {"bus_id" : 128, "stop_id" : 11, "stop_name" : "Beale Street", "next_stop" : 12, "stop_type" : "", "a_time" : "09:20"},
 {"bus_id" : 128, "stop_id" : 12, "stop_name" : "Sesame Street", "next_stop" : 14, "stop_type" : "", "a_time" : "09:45"},
 {"bus_id" : 128, "stop_id" : 14, "stop_name" : "Bourbon Street", "next_stop" : 19, "stop_type" : "O", "a_time" : "09:59"},
 {"bus_id" : 128, "stop_id" : 19, "stop_name" : "Prospekt Avenue", "next_stop" : 0, "stop_type" : "F", "a_time" : "10:12"},
 {"bus_id" : 256, "stop_id" : 2, "stop_name" : "Pilotow Street", "next_stop" : 3, "stop_type" : "S", "a_time" : "08:13"},
 {"bus_id" : 256, "stop_id" : 3, "stop_name" : "Startowa Street", "next_stop" : 8, "stop_type" : "", "a_time" : "08:16"},
 {"bus_id" : 256, "stop_id" : 8, "stop_name" : "Elm Street", "next_stop" : 10, "stop_type" : "", "a_time" : "08:29"},
 {"bus_id" : 256, "stop_id" : 10, "stop_name" : "Lombard Street", "next_stop" : 12, "stop_type" : "", "a_time" : "08:44"},
 {"bus_id" : 256, "stop_id" : 12, "stop_name" : "Sesame Street", "next_stop" : 13, "stop_type" : "O", "a_time" : "08:46"},
 {"bus_id" : 256, "stop_id" : 13, "stop_name" : "Orchard Road", "next_stop" : 16, "stop_type" : "", "a_time" : "09:13"},
 {"bus_id" : 256, "stop_id" : 16, "stop_name" : "Sunset Boulevard", "next_stop" : 17, "stop_type" : "O", "a_time" : "09:26"},
 {"bus_id" : 256, "stop_id" : 17, "stop_name" : "Khao San Road", "next_stop" : 20, "stop_type" : "O", "a_time" : "10:25"},
 {"bus_id" : 256, "stop_id" : 20, "stop_name" : "Michigan Avenue", "next_stop" : 0, "stop_type" : "F", "a_time" : "11:26"},
 {"bus_id" : 512, "stop_id" : 6, "stop_name" : "Arlington Road", "next_stop" : 7, "stop_type" : "S", "a_time" : "11:06"},
 {"bus_id" : 512, "stop_id" : 7, "stop_name" : "Parizska Street", "next_stop" : 8, "stop_type" : "", "a_time" : "11:15"},
 {"bus_id" : 512, "stop_id" : 8, "stop_name" : "Elm Street", "next_stop" : 9, "stop_type" : "", "a_time" : "11:56"},
 {"bus_id" : 512, "stop_id" : 9, "stop_name" : "Niebajka Avenue", "next_stop" : 15, "stop_type" : "", "a_time" : "12:20"},
 {"bus_id" : 512, "stop_id" : 15, "stop_name" : "Jakis Street", "next_stop" : 16, "stop_type" : "", "a_time" : "12:44"},
 {"bus_id" : 512, "stop_id" : 16, "stop_name" : "Sunset Boulevard", "next_stop" : 18, "stop_type" : "", "a_time" : "13:01"},
 {"bus_id" : 512, "stop_id" : 18, "stop_name" : "Jakas Avenue", "next_stop" : 19, "stop_type" : "", "a_time" : "14:00"},
 {"bus_id" : 1024, "stop_id" : 21, "stop_name" : "Karlikowska Avenue", "next_stop" : 12, "stop_type" : "S", "a_time" : "13:01"},
 {"bus_id" : 1024, "stop_id" : 12, "stop_name" : "Sesame Street", "next_stop" : 0, "stop_type" : "F", "a_time" : "14:00"},
 {"bus_id" : 512, "stop_id" : 19, "stop_name" : "Prospekt Avenue", "next_stop" : 0, "stop_type" : "F", "a_time" : "14:11"}
]


Expected values (0, 0, 0, 0)

"""



