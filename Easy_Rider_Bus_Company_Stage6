Project: Easy Rider Bus Company

Stage 6/6: On-demand

Description

The work seemed tedious and endless, but it finally looks like we're getting 
there. There is only one more point left in the specification that we need to 
check and fix: on-demand stops cannot be initial, final, or transfer stops.

Here are the documents that you have: documentation and diagram of the bus 
lines.

Documentation: 

Objectives

1. The string containing the data in JSON format is passed to standard input.
2. Check that all the departure points, final stops, and transfer stations are 
   not "On-demand".
3. Display the unique names of the stops containing this type of issue. Sort 
   them in ascending order.
4. If everything is fine, print OK.
5. The output should have the same formatting as shown in the example.


If you cannot find the necessary information in the stage description, it can 
probably be found in the attached documentation.


Example 1:
    
Input:

[
    {
        "bus_id": 128,
        "stop_id": 1,
        "stop_name": "Prospekt Avenue",
        "next_stop": 3,
        "stop_type": "S",
        "a_time": "08:12"
    },
    {
        "bus_id": 128,
        "stop_id": 3,
        "stop_name": "Elm Street",
        "next_stop": 5,
        "stop_type": "O",
        "a_time": "08:19"
    },
    {
        "bus_id": 128,
        "stop_id": 5,
        "stop_name": "Fifth Avenue",
        "next_stop": 7,
        "stop_type": "O",
        "a_time": "08:25"
    },
    {
        "bus_id": 128,
        "stop_id": 7,
        "stop_name": "Sesame Street",
        "next_stop": 0,
        "stop_type": "F",
        "a_time": "08:37"
    },
    {
        "bus_id": 256,
        "stop_id": 2,
        "stop_name": "Pilotow Street",
        "next_stop": 3,
        "stop_type": "S",
        "a_time": "09:20"
    },
    {
        "bus_id": 256,
        "stop_id": 3,
        "stop_name": "Elm Street",
        "next_stop": 6,
        "stop_type": "",
        "a_time": "09:45"
    },
    {
        "bus_id": 256,
        "stop_id": 6,
        "stop_name": "Sunset Boulevard",
        "next_stop": 7,
        "stop_type": "O",
        "a_time": "09:59"
    },
    {
        "bus_id": 256,
        "stop_id": 7,
        "stop_name": "Sesame Street",
        "next_stop": 0,
        "stop_type": "F",
        "a_time": "10:12"
    },
    {
        "bus_id": 512,
        "stop_id": 4,
        "stop_name": "Bourbon Street",
        "next_stop": 6,
        "stop_type": "S",
        "a_time": "08:13"
    },
    {
        "bus_id": 512,
        "stop_id": 6,
        "stop_name": "Sunset Boulevard",
        "next_stop": 0,
        "stop_type": "F",
        "a_time": "08:16"
    }
]

Output 1:

On demand stops test:
Wrong stop type: ['Elm Street', 'Sunset Boulevard']

Example 2:
    
Input 2:

[
    {
        "bus_id": 512,
        "stop_id": 4,
        "stop_name": "Bourbon Street",
        "next_stop": 6,
        "stop_type": "S",
        "a_time": "08:13"
    },
    {
        "bus_id": 512,
        "stop_id": 6,
        "stop_name": "Sunset Boulevard",
        "next_stop": 0,
        "stop_type": "F",
        "a_time": "08:16"
    }
]
Output 2:

On demand stops test:
OK


"""
# Posted Solution
import json


bus_lines = json.loads(input('> '))
#%%
bus_stop_detail = sorted(list(set([(x['stop_name'], x['stop_type']) for x in bus_lines])))  # list of unique bus_id
bus_stop_info = {y: [] for y in sorted(list(set([x['stop_name'] for x in bus_lines])))}
for bus_stop in bus_stop_detail:
    bus_stop_info[bus_stop[0]].append(bus_stop[1])
bad_stops = []
for stop_name, stop_types in bus_stop_info.items():
    if 'O' in stop_types and ('S' in stop_types or 'F' in stop_types or '' in stop_types):
        bad_stops.append(stop_name)
print(f'Wrong stop type: {sorted(bad_stops)}' if bad_stops else 'OK', )

